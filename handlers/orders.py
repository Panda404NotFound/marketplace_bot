from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from database.database import create_product_from_url, add_to_cart, get_user
from utils.marketplace_parser import parse_product_from_url, is_valid_marketplace_url
from keyboards.keyboards import get_main_menu, get_back_menu

class OrderStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    waiting_for_url = State()
    waiting_for_quantity = State()
    waiting_for_size = State()
    waiting_for_color = State()

async def process_new_order(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞."""
    await callback_query.answer()
    
    await callback_query.message.edit_text(
        "üîó <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤:\n"
        "‚Ä¢ Wildberries\n"
        "‚Ä¢ Ozon\n"
        "‚Ä¢ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_back_menu(),
        parse_mode='HTML'
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è URL —Ç–æ–≤–∞—Ä–∞
    await OrderStates.waiting_for_url.set()

async def process_product_url(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ URL —Ç–æ–≤–∞—Ä–∞."""
    url = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º URL –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
    if not is_valid_marketplace_url(url):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É "
            "–Ω–∞ —Ç–æ–≤–∞—Ä –∏–∑ Wildberries, Ozon –∏–ª–∏ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç–∞."
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
    wait_message = await message.answer("‚è≥ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –ø–æ URL
    product_info = parse_product_from_url(url)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–∂–∏–¥–∞–Ω–∏–∏
    await wait_message.delete()
    
    if not product_info:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        product_url=url,
        product_info=product_info
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    product_id = create_product_from_url(
        url=url,
        marketplace=product_info['marketplace'],
        title=product_info['title'],
        price=product_info['price'],
        description=product_info.get('description'),
        image_url=product_info.get('image_url')
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(product_id=product_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ —Ç–æ–≤–∞—Ä–µ
    marketplace_name = {
        'wildberries': 'Wildberries',
        'ozon': 'Ozon',
        'yandex_market': '–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç'
    }.get(product_info['marketplace'], product_info['marketplace'])
    
    product_text = (
        f"‚úÖ <b>–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω</b>\n\n"
        f"<b>{product_info['title']}</b>\n"
        f"–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {marketplace_name}\n"
        f"–¶–µ–Ω–∞: {product_info['price']} ‚ÇΩ\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'available_sizes' in product_info and product_info['available_sizes']:
        size_text = "üìè <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã:</b>\n"
        for size in product_info['available_sizes'][:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            if isinstance(size, dict):
                size_name = size.get('name', '')
                orig_name = size.get('origName', '')
                size_display = f"{size_name}" if not orig_name else f"{size_name} ({orig_name})"
                size_text += f"- {size_display}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–≤–µ—Ç–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
                if 'colors' in size and size['colors']:
                    size_text += "  –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞:\n"
                    for color in size['colors'][:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ü–≤–µ—Ç–æ–≤
                        size_text += f"  ‚Ä¢ {color}\n"
        
        # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –±–æ–ª—å—à–µ 5, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º
        if len(product_info['available_sizes']) > 5:
            size_text += f"...–∏ –µ—â–µ {len(product_info['available_sizes']) - 5} —Ä–∞–∑–º–µ—Ä–æ–≤\n"
        
        product_text += size_text + "\n"
    
    product_text += "<b>–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:</b>"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å —Ç–æ–≤–∞—Ä–∞
    if product_info.get('marketplace') == 'wildberries':
        # –î–ª—è Wildberries –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await message.answer(
            product_text,
            reply_markup=get_back_menu(),
            parse_mode='HTML'
        )
    # –î–ª—è –¥—Ä—É–≥–∏—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–∂–Ω—é—é –ª–æ–≥–∏–∫—É
    elif product_info.get('image_url'):
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            print(f"–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {product_info['image_url']}")
            print(f"–¢–∏–ø URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {type(product_info['image_url'])}")
            print(f"–î–ª–∏–Ω–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(product_info['image_url']) if product_info['image_url'] else 0}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
            await message.answer_photo(
                photo=product_info['image_url'],
                caption=product_text,
                reply_markup=get_back_menu(),
                parse_mode='HTML'
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}, —Ç–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
            
            await message.answer(
                product_text,
                reply_markup=get_back_menu(),
                parse_mode='HTML'
            )
    else:
        # –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.answer(
            product_text,
            reply_markup=get_back_menu(),
            parse_mode='HTML'
        )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É - —É–∫–∞–∑–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    await OrderStates.waiting_for_quantity.set()

async def process_product_quantity(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞."""
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(quantity=quantity)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-', –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è:",
        reply_markup=get_back_menu()
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É - —É–∫–∞–∑–∞–Ω–∏—é —Ä–∞–∑–º–µ—Ä–∞
    await OrderStates.waiting_for_size.set()

async def process_product_size(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–∞."""
    size = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    product_info = data.get('product_info', {})
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª '-', —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞–∫ None
    if size == '-':
        size = None
        await state.update_data(size=size)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-', –µ—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è:",
            reply_markup=get_back_menu()
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É - —É–∫–∞–∑–∞–Ω–∏—é —Ü–≤–µ—Ç–∞
        await OrderStates.waiting_for_color.set()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–∞—Ö —Ç–æ–≤–∞—Ä–∞
    available_sizes = product_info.get('available_sizes', [])
    valid_size = False
    
    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    available_colors = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ä–∞–∑–º–µ—Ä–∞–º
    for s in available_sizes:
        if isinstance(s, dict) and (s.get('name') == size or s.get('origName') == size):
            valid_size = True
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            available_colors = s.get('colors', [])
            break
    
    if available_sizes and not valid_size:
        # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        size_options = "\n".join([
            f"- {s.get('name', '')} " + (f"({s.get('origName', '')})" if s.get('origName') else '')
            for s in available_sizes[:10] if isinstance(s, dict)
        ])
        
        # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –±–æ–ª—å—à–µ 10, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º
        if len(available_sizes) > 10:
            size_options += f"\n...–∏ –µ—â–µ {len(available_sizes) - 10} —Ä–∞–∑–º–µ—Ä–æ–≤"
        
        await message.answer(
            f"‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤:\n\n{size_options}\n\n"
            f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-', –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ –≤–∞–∂–µ–Ω.",
            reply_markup=get_back_menu()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(size=size, available_colors=available_colors)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Ö –≤—ã–±—Ä–∞—Ç—å
    if available_colors:
        color_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n\n"
        for color in available_colors[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ü–≤–µ—Ç–æ–≤
            color_text += f"- {color}\n"
        
        # –ï—Å–ª–∏ —Ü–≤–µ—Ç–æ–≤ –±–æ–ª—å—à–µ 10, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º
        if len(available_colors) > 10:
            color_text += f"\n...–∏ –µ—â–µ {len(available_colors) - 10} —Ü–≤–µ—Ç–æ–≤"
        
        color_text += "\n\n–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-', –µ—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ –≤–∞–∂–µ–Ω."
        
        await message.answer(
            color_text,
            reply_markup=get_back_menu()
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–≤–µ—Ç–∞—Ö, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–≤–µ—Ç
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-', –µ—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è:",
            reply_markup=get_back_menu()
        )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É - —É–∫–∞–∑–∞–Ω–∏—é —Ü–≤–µ—Ç–∞
    await OrderStates.waiting_for_color.set()

async def process_product_color(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–∞."""
    color = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª '-', —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∫–∞–∫ None
    if color == '-':
        color = None
    else:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        available_colors = data.get('available_colors', [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–≤–µ—Ç–∞–º
        if available_colors and color not in available_colors:
            color_options = "\n".join([f"- {c}" for c in available_colors[:10]])
            
            # –ï—Å–ª–∏ —Ü–≤–µ—Ç–æ–≤ –±–æ–ª—å—à–µ 10, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º
            if len(available_colors) > 10:
                color_options += f"\n...–∏ –µ—â–µ {len(available_colors) - 10} —Ü–≤–µ—Ç–æ–≤"
            
            await message.answer(
                f"‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤:\n\n{color_options}\n\n"
                f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-', –µ—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ –≤–∞–∂–µ–Ω.",
                reply_markup=get_back_menu()
            )
            return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    product_id = data.get('product_id')
    product_info = data.get('product_info')
    quantity = data.get('quantity')
    size = data.get('size')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    user_id = message.from_user.id
    success = add_to_cart(user_id, product_id, quantity, size, color)
    
    if success:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
        cart_text = (
            f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É</b>\n\n"
            f"<b>{product_info['title']}</b>\n"
            f"–¶–µ–Ω–∞: {product_info['price']} ‚ÇΩ\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
        )
        
        if size:
            cart_text += f"–†–∞–∑–º–µ—Ä: {size}\n"
        
        if color:
            cart_text += f"–¶–≤–µ—Ç: {color}\n"
        
        # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã
        total_price = product_info['price'] * quantity
        cart_text += f"\n<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:</b> {total_price} ‚ÇΩ\n\n"
        
        cart_text += "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å —Ç–æ–≤–∞—Ä–∞
        if product_info.get('marketplace') == 'wildberries':
            # –î–ª—è Wildberries –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            await message.answer(
                cart_text,
                reply_markup=get_main_menu(),
                parse_mode='HTML'
            )
        # –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —ç—Ç–æ –Ω–µ Wildberries, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º
        elif product_info.get('image_url'):
            try:
                await message.answer_photo(
                    photo=product_info['image_url'],
                    caption=cart_text,
                    reply_markup=get_main_menu(),
                    parse_mode='HTML'
                )
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await message.answer(
                    cart_text,
                    reply_markup=get_main_menu(),
                    parse_mode='HTML'
                )
        else:
            # –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await message.answer(
                cart_text,
                reply_markup=get_main_menu(),
                parse_mode='HTML'
            )
    else:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_menu()
        )
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

async def process_back_to_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await callback_query.answer()
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
    
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=get_main_menu()
    )

def register_order_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'."""
    dp.register_callback_query_handler(process_new_order, lambda c: c.data == "new_order")
    dp.register_message_handler(process_product_url, state=OrderStates.waiting_for_url)
    dp.register_message_handler(process_product_quantity, state=OrderStates.waiting_for_quantity)
    dp.register_message_handler(process_product_size, state=OrderStates.waiting_for_size)
    dp.register_message_handler(process_product_color, state=OrderStates.waiting_for_color)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è OrderStates
    dp.register_callback_query_handler(
        process_back_to_main_menu,
        lambda c: c.data in ["back", "main_menu"],
        state=OrderStates.all_states
    ) 