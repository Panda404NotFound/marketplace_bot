from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from database.database import create_product_from_url, add_to_cart, get_user
from utils.marketplace_parser import parse_product_from_url, is_valid_marketplace_url
from keyboards.keyboards import get_main_menu, get_back_menu

class OrderStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    waiting_for_url = State()
    waiting_for_quantity = State()
    waiting_for_size = State()
    waiting_for_color = State()

async def process_new_order(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞."""
    await callback_query.answer()
    
    await callback_query.message.edit_text(
        "üîó <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤:\n"
        "‚Ä¢ Wildberries\n"
        "‚Ä¢ Ozon\n"
        "‚Ä¢ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_back_menu(),
        parse_mode='HTML'
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è URL —Ç–æ–≤–∞—Ä–∞
    await OrderStates.waiting_for_url.set()

async def process_product_url(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä."""
    url = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º URL –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
    if not is_valid_marketplace_url(url):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É "
            "–Ω–∞ —Ç–æ–≤–∞—Ä –∏–∑ Wildberries, Ozon –∏–ª–∏ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç–∞."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –ø–æ URL
    product_info = parse_product_from_url(url)
    
    if not product_info:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        product_url=url,
        product_info=product_info
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    product_id = create_product_from_url(
        url=url,
        marketplace=product_info['marketplace'],
        title=product_info['title'],
        price=product_info['price'],
        description=product_info.get('description'),
        image_url=product_info.get('image_url')
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(product_id=product_id)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    product_text = (
        f"‚úÖ <b>–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω</b>\n\n"
        f"<b>{product_info['title']}</b>\n"
        f"–¶–µ–Ω–∞: {product_info['price']} ‚ÇΩ\n\n"
        f"<b>–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:</b>"
    )
    
    await message.answer(
        product_text,
        reply_markup=get_back_menu(),
        parse_mode='HTML'
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É - —É–∫–∞–∑–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    await OrderStates.waiting_for_quantity.set()

async def process_product_quantity(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞."""
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(quantity=quantity)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-', –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è:",
        reply_markup=get_back_menu()
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É - —É–∫–∞–∑–∞–Ω–∏—é —Ä–∞–∑–º–µ—Ä–∞
    await OrderStates.waiting_for_size.set()

async def process_product_size(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–∞."""
    size = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª '-', —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞–∫ None
    if size == '-':
        size = None
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(size=size)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–≤–µ—Ç (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-', –µ—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è:",
        reply_markup=get_back_menu()
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É - —É–∫–∞–∑–∞–Ω–∏—é —Ü–≤–µ—Ç–∞
    await OrderStates.waiting_for_color.set()

async def process_product_color(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–∞."""
    color = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª '-', —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∫–∞–∫ None
    if color == '-':
        color = None
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    product_id = data.get('product_id')
    product_info = data.get('product_info')
    quantity = data.get('quantity')
    size = data.get('size')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    user_id = message.from_user.id
    success = add_to_cart(user_id, product_id, quantity, size, color)
    
    if success:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
        cart_text = (
            f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É</b>\n\n"
            f"<b>{product_info['title']}</b>\n"
            f"–¶–µ–Ω–∞: {product_info['price']} ‚ÇΩ\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
        )
        
        if size:
            cart_text += f"–†–∞–∑–º–µ—Ä: {size}\n"
        
        if color:
            cart_text += f"–¶–≤–µ—Ç: {color}\n"
        
        cart_text += "\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É."
        
        await message.answer(
            cart_text,
            reply_markup=get_main_menu(),
            parse_mode='HTML'
        )
    else:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_menu()
        )
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

async def process_back_to_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await callback_query.answer()
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
    
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=get_main_menu()
    )

def register_order_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'."""
    dp.register_callback_query_handler(process_new_order, lambda c: c.data == "new_order")
    dp.register_message_handler(process_product_url, state=OrderStates.waiting_for_url)
    dp.register_message_handler(process_product_quantity, state=OrderStates.waiting_for_quantity)
    dp.register_message_handler(process_product_size, state=OrderStates.waiting_for_size)
    dp.register_message_handler(process_product_color, state=OrderStates.waiting_for_color)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è OrderStates
    dp.register_callback_query_handler(
        process_back_to_main_menu,
        lambda c: c.data in ["back", "main_menu"],
        state=OrderStates.all_states
    ) 