from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from database.database import create_product_from_url, add_to_cart, get_user
from utils.marketplace_parser import parse_product_from_url, is_valid_marketplace_url
from keyboards.keyboards import (
    get_main_menu, get_back_menu, get_quantity_keyboard, get_size_keyboard, 
    get_color_keyboard, get_skip_size_keyboard, get_skip_color_keyboard,
    get_notes_keyboard
)

class OrderStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    waiting_for_url = State()
    waiting_for_quantity = State()
    waiting_for_size = State()
    waiting_for_color = State()

async def process_new_order(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞."""
    await callback_query.answer()
    
    await callback_query.message.edit_text(
        "üîó <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤:\n"
        "‚Ä¢ Wildberries\n"
        "‚Ä¢ Ozon\n"
        "‚Ä¢ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_back_menu(),
        parse_mode='HTML'
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è URL —Ç–æ–≤–∞—Ä–∞
    await OrderStates.waiting_for_url.set()

async def process_product_url(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ URL —Ç–æ–≤–∞—Ä–∞."""
    url = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º URL –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
    if not is_valid_marketplace_url(url):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É "
            "–Ω–∞ —Ç–æ–≤–∞—Ä –∏–∑ Wildberries, Ozon –∏–ª–∏ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç–∞.",
            reply_markup=get_main_menu()
        )
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ Ozon –∏ –≤—ã–≤–æ–¥–∏–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if 'ozon.ru' in url.lower():
        await message.answer(
            "‚ö†Ô∏è <b>–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å Ozon –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è</b>\n\n"
            "–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è Ozon –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ Wildberries –∏–ª–∏ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç.",
            parse_mode='HTML',
            reply_markup=get_main_menu()
        )
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
    wait_message = await message.answer("‚è≥ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –ø–æ URL
    product_info = parse_product_from_url(url)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–∂–∏–¥–∞–Ω–∏–∏
    await wait_message.delete()
    
    if not product_info:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_menu()
        )
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–ø—á–∏ –∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫)
    if product_info.get('error', False) or product_info.get('price', 0.0) == 0.0:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–ø—á–∏
        if "–∫–∞–ø—á–∞" in product_info.get('description', '').lower() or "captcha" in product_info.get('description', '').lower():
            error_text = "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...."
        else:
            error_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ. {product_info.get('description', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')}"
            
        await message.answer(
            error_text,
            reply_markup=get_main_menu()
        )
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∂–¥–∞–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ URL
        await state.finish()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        product_url=url,
        product_info=product_info
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    product_id = create_product_from_url(
        url=url,
        marketplace=product_info['marketplace'],
        title=product_info['title'],
        price=product_info['price'],
        description=product_info.get('description'),
        image_url=product_info.get('image_url')
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(product_id=product_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ —Ç–æ–≤–∞—Ä–µ
    marketplace_name = {
        'wildberries': 'Wildberries',
        'ozon': 'Ozon',
        'yandex_market': '–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç'
    }.get(product_info['marketplace'], product_info['marketplace'])
    
    product_text = (
        f"‚úÖ <b>–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω</b>\n\n"
        f"<b>{product_info['title']}</b>\n"
        f"–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {marketplace_name}\n"
        f"–¶–µ–Ω–∞: {product_info['price']} ‚ÇΩ\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'available_sizes' in product_info and product_info['available_sizes']:
        size_text = "üìè <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã:</b>\n"
        for size in product_info['available_sizes'][:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            if isinstance(size, dict):
                size_name = size.get('name', '')
                orig_name = size.get('origName', '')
                size_display = f"{size_name}" if not orig_name else f"{size_name} ({orig_name})"
                size_text += f"- {size_display}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–≤–µ—Ç–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
                if 'colors' in size and size['colors']:
                    size_text += "  –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞:\n"
                    for color in size['colors'][:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ü–≤–µ—Ç–æ–≤
                        size_text += f"  ‚Ä¢ {color}\n"
        
        # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –±–æ–ª—å—à–µ 5, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º
        if len(product_info['available_sizes']) > 5:
            size_text += f"...–∏ –µ—â–µ {len(product_info['available_sizes']) - 5} —Ä–∞–∑–º–µ—Ä–æ–≤\n"
        
        product_text += size_text + "\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å —Ç–æ–≤–∞—Ä–∞
    if product_info.get('marketplace') == 'wildberries':
        # –î–ª—è Wildberries –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await message.answer(
            product_text,
            parse_mode='HTML'
        )
    # –î–ª—è –¥—Ä—É–≥–∏—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–∂–Ω—é—é –ª–æ–≥–∏–∫—É
    elif product_info.get('image_url'):
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            print(f"–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {product_info['image_url']}")
            print(f"–¢–∏–ø URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {type(product_info['image_url'])}")
            print(f"–î–ª–∏–Ω–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(product_info['image_url']) if product_info['image_url'] else 0}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
            await message.answer_photo(
                photo=product_info['image_url'],
                caption=product_text,
                parse_mode='HTML'
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}, —Ç–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
            
            await message.answer(
                product_text,
                parse_mode='HTML'
            )
    else:
        # –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.answer(
            product_text,
            parse_mode='HTML'
        )
    
    # –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        "<b>–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:</b>",
        reply_markup=get_quantity_keyboard(),
        parse_mode='HTML'
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É - —É–∫–∞–∑–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    await OrderStates.waiting_for_quantity.set()

async def process_quantity_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ callback_data
    quantity_str = callback_query.data.replace('quantity_', '')
    
    if quantity_str == 'manual':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä—É—á–Ω–æ–π –≤–≤–æ–¥, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await callback_query.message.edit_text(
            "<b>–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:</b>\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:",
            parse_mode='HTML'
        )
        return
    
    try:
        quantity = int(quantity_str)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(quantity=quantity)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        product_info = data.get('product_info', {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–∞—Ö —Ç–æ–≤–∞—Ä–∞
        available_sizes = product_info.get('available_sizes', [])
        marketplace = product_info.get('marketplace', '')
        
        if available_sizes:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
            await callback_query.message.edit_text(
                "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã:</b>",
                reply_markup=get_size_keyboard(available_sizes),
                parse_mode='HTML'
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É - —É–∫–∞–∑–∞–Ω–∏—é —Ä–∞–∑–º–µ—Ä–∞
            await OrderStates.waiting_for_size.set()
        elif marketplace in ['yandex_market', 'ozon']:
            # –î–ª—è –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç –∏ –û–∑–æ–Ω –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ–ø—É—Å–∫–∞
            await callback_query.message.edit_text(
                "–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è:",
                reply_markup=get_skip_size_keyboard()
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É - —É–∫–∞–∑–∞–Ω–∏—é —Ä–∞–∑–º–µ—Ä–∞
            await OrderStates.waiting_for_size.set()
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –∏–ª–∏ —Å–ª—É—á–∞–µ–≤ –±–µ–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–º
            await callback_query.message.edit_text(
                "–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-', –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è:",
                reply_markup=get_back_menu()
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É - —É–∫–∞–∑–∞–Ω–∏—é —Ä–∞–∑–º–µ—Ä–∞
            await OrderStates.waiting_for_size.set()
    except ValueError:
        # –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —á–∏—Å–ª–æ
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤—Ä—É—á–Ω—É—é:",
            reply_markup=get_back_menu()
        )
        return

async def process_product_quantity(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ."""
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(quantity=quantity)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    product_info = data.get('product_info', {})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–∞—Ö —Ç–æ–≤–∞—Ä–∞
    available_sizes = product_info.get('available_sizes', [])
    
    if available_sizes:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞
        await message.answer(
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã:</b>",
            reply_markup=get_size_keyboard(available_sizes),
            parse_mode='HTML'
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–º–µ—Ä–∞—Ö, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–º
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-', –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è:",
            reply_markup=get_back_menu()
        )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É - —É–∫–∞–∑–∞–Ω–∏—é —Ä–∞–∑–º–µ—Ä–∞
    await OrderStates.waiting_for_size.set()

async def process_size_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑ callback_data
    size_str = callback_query.data.replace('size_', '')
    
    if size_str == 'none':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è" –∏–ª–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        size = None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(size=size)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        product_info = data.get('product_info', {})
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä—É
        await callback_query.message.edit_text(
            "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä—É (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=get_notes_keyboard()
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É - —É–∫–∞–∑–∞–Ω–∏—é —Ü–≤–µ—Ç–∞/–ø—Ä–∏–º–µ—á–∞–Ω–∏–π
        await OrderStates.waiting_for_color.set()
        return
    elif size_str == 'manual':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–º
        await callback_query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=get_back_menu()
        )
        return
    else:
        size = size_str
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(size=size)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    product_info = data.get('product_info', {})
    marketplace = product_info.get('marketplace', '')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    available_colors = []
    if size and 'available_sizes' in product_info:
        for s in product_info['available_sizes']:
            if isinstance(s, dict) and s.get('name') == size:
                available_colors = s.get('colors', [])
                break
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(available_colors=available_colors)
    
    if available_colors:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
        await callback_query.message.edit_text(
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞:</b>",
            reply_markup=get_color_keyboard(available_colors),
            parse_mode='HTML'
        )
    elif marketplace in ['yandex_market', 'ozon']:
        # –î–ª—è –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç –∏ –û–∑–æ–Ω –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä—É
        await callback_query.message.edit_text(
            "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä—É (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=get_notes_keyboard()
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä—É
        await callback_query.message.edit_text(
            "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä—É (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=get_notes_keyboard()
        )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É - —É–∫–∞–∑–∞–Ω–∏—é —Ü–≤–µ—Ç–∞/–ø—Ä–∏–º–µ—á–∞–Ω–∏–π
    await OrderStates.waiting_for_color.set()

async def process_color_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π —á–µ—Ä–µ–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback_data
    action_str = callback_query.data.replace('color_', '')
    
    if action_str == 'none':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è" –∏–ª–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        notes = None
    elif action_str == 'manual':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–í–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ", –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º
        await callback_query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä—É:",
            reply_markup=get_back_menu()
        )
        return
    else:
        # –ï—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ü–≤–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
        notes = action_str
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É —Å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ–º –≤–º–µ—Å—Ç–æ —Ü–≤–µ—Ç–∞
    await add_product_to_cart(callback_query.message, state, callback_query.from_user.id, notes)

async def add_product_to_cart(message, state, user_id, notes=None):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É."""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    product_id = data.get('product_id')
    product_info = data.get('product_info')
    quantity = data.get('quantity')
    size = data.get('size')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    success = add_to_cart(user_id, product_id, quantity, size, notes)
    
    if success:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
        cart_text = (
            f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É</b>\n\n"
            f"<b>{product_info['title']}</b>\n"
            f"–¶–µ–Ω–∞: {product_info['price']} ‚ÇΩ\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
        )
        
        if size:
            cart_text += f"–†–∞–∑–º–µ—Ä: {size}\n"
        
        if notes:
            cart_text += f"–ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {notes}\n"
        
        # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã —Å —è–≤–Ω—ã–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –≤ —á–∏—Å–ª–æ
        try:
            price = float(product_info['price'])
            total_price = price * quantity
            cart_text += f"\n<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:</b> {total_price:.2f} ‚ÇΩ\n\n"
        except (ValueError, TypeError):
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ü–µ–Ω—É –≤ —á–∏—Å–ª–æ, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            cart_text += f"\n<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å\n\n"
        
        cart_text += "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        if hasattr(message, 'edit_text'):  # –≠—Ç–æ callback_query.message
            try:
                await message.edit_text(
                    cart_text,
                    reply_markup=get_main_menu(),
                    parse_mode='HTML'
                )
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                bot = message.bot
                await bot.send_message(
                    chat_id=user_id,
                    text=cart_text,
                    reply_markup=get_main_menu(),
                    parse_mode='HTML'
                )
        else:  # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ message
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å —Ç–æ–≤–∞—Ä–∞
            if product_info.get('marketplace') == 'wildberries' or not product_info.get('image_url'):
                # –î–ª—è Wildberries –∏–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await message.answer(
                    cart_text,
                    reply_markup=get_main_menu(),
                    parse_mode='HTML'
                )
            else:
                # –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
                try:
                    await message.answer_photo(
                        photo=product_info['image_url'],
                        caption=cart_text,
                        reply_markup=get_main_menu(),
                        parse_mode='HTML'
                    )
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await message.answer(
                        cart_text,
                        reply_markup=get_main_menu(),
                        parse_mode='HTML'
                    )
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        
        if hasattr(message, 'edit_text'):  # –≠—Ç–æ callback_query.message
            try:
                await message.edit_text(
                    error_text,
                    reply_markup=get_main_menu()
                )
            except Exception:
                bot = message.bot
                await bot.send_message(
                    chat_id=user_id,
                    text=error_text,
                    reply_markup=get_main_menu()
                )
        else:  # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ message
            await message.answer(
                error_text,
                reply_markup=get_main_menu()
            )
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

async def process_back_to_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await callback_query.answer()
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
    
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n"
        "‚Ä¢ üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç - –ø—Ä–æ—Ñ–∏–ª—å, –∑–∞–∫–∞–∑—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "‚Ä¢ üõçÔ∏è –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä\n"
        "‚Ä¢ üöö –î–æ—Å—Ç–∞–≤–∫–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ\n"
        "‚Ä¢ üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏\n\n"
        "üìå –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏",
        reply_markup=get_main_menu()
    )

async def process_product_size(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–≤–æ–¥–µ."""
    size = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    product_info = data.get('product_info', {})
    marketplace = product_info.get('marketplace', '')
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª '-', —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞–∫ None
    if size == '-':
        size = None
        await state.update_data(size=size)
        
        # –ï—Å–ª–∏ —ç—Ç–æ Yandex –∏–ª–∏ Ozon, —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ —Ü–≤–µ—Ç–∞
        if marketplace in ['yandex_market', 'ozon']:
            await add_product_to_cart(message, state, message.from_user.id, notes=None)
            return
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞
            await message.answer(
                "–£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-', –µ—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è:",
                reply_markup=get_back_menu()
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É - —É–∫–∞–∑–∞–Ω–∏—é —Ü–≤–µ—Ç–∞
            await OrderStates.waiting_for_color.set()
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–∞—Ö —Ç–æ–≤–∞—Ä–∞
    available_sizes = product_info.get('available_sizes', [])
    valid_size = False
    
    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    available_colors = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ä–∞–∑–º–µ—Ä–∞–º
    for s in available_sizes:
        if isinstance(s, dict) and (s.get('name') == size or s.get('origName') == size):
            valid_size = True
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            available_colors = s.get('colors', [])
            break
    
    if available_sizes and not valid_size:
        # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        size_options = "\n".join([
            f"- {s.get('name', '')} " + (f"({s.get('origName', '')})" if s.get('origName') else '')
            for s in available_sizes[:10] if isinstance(s, dict)
        ])
        
        # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –±–æ–ª—å—à–µ 10, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º
        if len(available_sizes) > 10:
            size_options += f"\n...–∏ –µ—â–µ {len(available_sizes) - 10} —Ä–∞–∑–º–µ—Ä–æ–≤"
        
        await message.answer(
            f"‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤:\n\n{size_options}\n\n"
            f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-', –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ –≤–∞–∂–µ–Ω.",
            reply_markup=get_back_menu()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(size=size, available_colors=available_colors)
    
    # –ï—Å–ª–∏ —ç—Ç–æ Yandex –∏–ª–∏ Ozon –∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤, —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    if marketplace in ['yandex_market', 'ozon'] and not available_colors:
        await add_product_to_cart(message, state, message.from_user.id, notes=None)
        return
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Ö –≤—ã–±—Ä–∞—Ç—å
    if available_colors:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
        await message.answer(
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞:</b>",
            reply_markup=get_color_keyboard(available_colors),
            parse_mode='HTML'
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–≤–µ—Ç–∞—Ö, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–≤–µ—Ç
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-', –µ—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è:",
            reply_markup=get_back_menu()
        )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É - —É–∫–∞–∑–∞–Ω–∏—é —Ü–≤–µ—Ç–∞
    await OrderStates.waiting_for_color.set()

async def process_product_notes(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –∫ —Ç–æ–≤–∞—Ä—É –ø—Ä–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–≤–æ–¥–µ."""
    notes = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª '-', —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫–∞–∫ None
    if notes == '-':
        notes = None
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
    await add_product_to_cart(message, state, message.from_user.id, notes)

def register_order_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'."""
    dp.register_callback_query_handler(process_new_order, lambda c: c.data == "new_order")
    dp.register_message_handler(process_product_url, state=OrderStates.waiting_for_url)
    dp.register_message_handler(process_product_quantity, state=OrderStates.waiting_for_quantity)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
    dp.register_callback_query_handler(
        process_quantity_selection, 
        lambda c: c.data.startswith("quantity_"), 
        state=OrderStates.waiting_for_quantity
    )
    dp.register_callback_query_handler(
        process_size_selection, 
        lambda c: c.data.startswith("size_"), 
        state=OrderStates.waiting_for_size
    )
    dp.register_callback_query_handler(
        process_color_selection, 
        lambda c: c.data.startswith("color_"), 
        state=OrderStates.waiting_for_color
    )
    
    dp.register_message_handler(process_product_size, state=OrderStates.waiting_for_size)
    dp.register_message_handler(process_product_notes, state=OrderStates.waiting_for_color)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è OrderStates
    dp.register_callback_query_handler(
        process_back_to_main_menu,
        lambda c: c.data in ["back", "main_menu"],
        state=OrderStates.all_states
    ) 