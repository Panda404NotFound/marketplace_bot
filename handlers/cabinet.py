from aiogram import types
from aiogram.dispatcher import FSMContext

from database.database import get_user, get_orders
from keyboards.keyboards import get_cabinet_menu, get_main_menu, get_back_menu

async def process_cabinet(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–∞–∑–¥–µ–ª '–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç'."""
    await callback_query.answer()
    
    await callback_query.message.edit_text(
        "üè† <b>–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º, "
        "–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
        reply_markup=get_cabinet_menu(),
        parse_mode='HTML'
    )

async def process_profile(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    user = get_user(user_id)
    
    if user:
        profile_text = (
            "üë§ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"–ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–§–∞–º–∏–ª–∏—è: {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        )
    else:
        profile_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è."
    
    await callback_query.message.edit_text(
        profile_text,
        reply_markup=get_back_menu(),
        parse_mode='HTML'
    )

async def process_order_history(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤."""
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    orders = get_orders(user_id)
    
    if orders:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∑–∞–∫–∞–∑–æ–≤
        orders_text = "üì¶ <b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤</b>\n\n"
        
        for order in orders:
            order_id = order['id']
            total = order['total_amount']
            status = order['status']
            date = order['created_at'].strftime('%d.%m.%Y %H:%M')
            
            # –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            status_ru = {
                'new': '–ù–æ–≤—ã–π',
                'paid': '–û–ø–ª–∞—á–µ–Ω',
                'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
                'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
                'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
            }
            
            orders_text += (
                f"<b>–ó–∞–∫–∞–∑ #{order_id}</b>\n"
                f"–î–∞—Ç–∞: {date}\n"
                f"–°—É–º–º–∞: {total} ‚ÇΩ\n"
                f"–°—Ç–∞—Ç—É—Å: {status_ru.get(status, status)}\n\n"
            )
    else:
        orders_text = "üì¶ <b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤."
    
    await callback_query.message.edit_text(
        orders_text,
        reply_markup=get_back_menu(),
        parse_mode='HTML'
    )

async def process_settings(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∑–∞–≥–ª—É—à–∫–∞)."""
    await callback_query.answer()
    
    settings_text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö."
    )
    
    await callback_query.message.edit_text(
        settings_text,
        reply_markup=get_back_menu(),
        parse_mode='HTML'
    )

def register_cabinet_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–∞–∑–¥–µ–ª–∞ '–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç'."""
    dp.register_callback_query_handler(process_cabinet, lambda c: c.data == "cabinet")
    dp.register_callback_query_handler(process_profile, lambda c: c.data == "profile")
    dp.register_callback_query_handler(process_order_history, lambda c: c.data == "order_history")
    dp.register_callback_query_handler(process_settings, lambda c: c.data == "settings") 