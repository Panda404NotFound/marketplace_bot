from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database.database import get_user, get_orders, get_order
from keyboards.keyboards import get_cabinet_menu, get_main_menu, get_back_menu, get_user_orders_menu, get_payment_methods
from config.config import DEFAULT_DELIVERY_ADDRESS

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
class OrderHistoryStates(StatesGroup):
    viewing_history = State()

async def process_cabinet(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–∞–∑–¥–µ–ª '–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç'."""
    await callback_query.answer()
    
    await callback_query.message.edit_text(
        "üè† <b>–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º, "
        "–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
        reply_markup=get_cabinet_menu(),
        parse_mode='HTML'
    )

async def process_profile(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    user = get_user(user_id)
    
    if user:
        profile_text = (
            "üë§ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"–ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–§–∞–º–∏–ª–∏—è: {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        )
    else:
        profile_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è."
    
    await callback_query.message.edit_text(
        profile_text,
        reply_markup=get_back_menu(),
        parse_mode='HTML'
    )

async def process_order_history(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤."""
    await callback_query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    page = 1
    if '_' in callback_query.data:
        try:
            # –§–æ—Ä–º–∞—Ç: order_history_page_X
            parts = callback_query.data.split('_')
            if len(parts) >= 4 and parts[0] == 'order' and parts[1] == 'history' and parts[2] == 'page':
                page = int(parts[3])
        except (ValueError, IndexError):
            page = 1
    
    user_id = callback_query.from_user.id
    orders = get_orders(user_id)
    
    if not orders:
        await callback_query.message.edit_text(
            "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
            reply_markup=get_back_menu(),
            parse_mode='HTML'
        )
        return
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    items_per_page = 5
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = (len(orders) + items_per_page - 1) // items_per_page
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page < 1:
        page = 1
    elif page > total_pages:
        page = total_pages
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * items_per_page
    end_idx = min(start_idx + items_per_page, len(orders))
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    current_page_orders = orders[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
    history_text = f"üìã <b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤</b> (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})\n\n"
    
    for order in current_page_orders:
        try:
            order_id = order.id
            order_date = order.created_at.strftime('%d.%m.%Y %H:%M')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            status_raw = order.status
            status_display = {
                'new': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
                'paid': '–û–ø–ª–∞—á–µ–Ω',
                'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
                'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
                'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
            }.get(status_raw, status_raw)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            status_emoji = {
                'new': '‚è≥',
                'paid': '‚úÖ',
                'shipped': 'üöö',
                'delivered': 'üì¶',
                'cancelled': '‚ùå'
            }.get(status_raw, '‚ùì')
            
            status_display = f"{status_emoji} {status_display}"
            
            payment_method = order.payment_method.upper() if order.payment_method else "–ù–µ —É–∫–∞–∑–∞–Ω"
            delivery_address = order.delivery_address or "–ù–µ —É–∫–∞–∑–∞–Ω"
            
            history_text += (
                f"<b>–ó–∞–∫–∞–∑ #{order_id}</b>\n"
                f"–î–∞—Ç–∞: {order_date}\n"
                f"–°—Ç–∞—Ç—É—Å: {status_display}\n"
                f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}\n"
                f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n\n"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –∑–∞–∫–∞–∑ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        total_pages=total_pages,
        current_page=page
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
    await OrderHistoryStates.viewing_history.set()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –µ—Å–ª–∏ –≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
    if total_pages > 1:
        nav_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        if page > 1:
            nav_buttons.append(
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_page")
            )
        
        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        if page < total_pages:
            nav_buttons.append(
                InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data="next_page")
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard.row(*nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    keyboard.row(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    await callback_query.message.edit_text(
        history_text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )

async def process_order_history_navigation(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤."""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    current_page = data.get('current_page', 1)
    total_pages = data.get('total_pages', 1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if callback_query.data == 'prev_page':
        page = max(1, current_page - 1)
    elif callback_query.data == 'next_page':
        page = min(total_pages, current_page + 1)
    else:
        await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
        return
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —Å –Ω–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    callback_query.data = f"order_history_page_{page}"
    await process_order_history(callback_query, state)

async def process_settings(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∑–∞–≥–ª—É—à–∫–∞)."""
    await callback_query.answer()
    
    settings_text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö."
    )
    
    await callback_query.message.edit_text(
        settings_text,
        reply_markup=get_back_menu(),
        parse_mode='HTML'
    )

async def process_pay_order_from_history(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑' –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤."""
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
    order_id = int(callback_query.data.split('_')[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    order_info = get_order(order_id)
    
    if order_info:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            order_id=order_id, 
            delivery_address=order_info.get('delivery_address') or ""
        )
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥—Ä–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å
        await state.update_data(
            order_id=order_id,
            delivery_address=DEFAULT_DELIVERY_ADDRESS
        )
    
    await callback_query.message.edit_text(
        f"üí∞ <b>–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_payment_methods(),
        parse_mode='HTML'
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    from handlers.cart import PaymentStates
    await PaymentStates.waiting_for_payment_method.set()

def register_cabinet_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç'."""
    dp.register_callback_query_handler(process_cabinet, lambda c: c.data == "cabinet")
    dp.register_callback_query_handler(
        process_order_history, 
        lambda c: c.data == "order_history" or c.data.startswith("order_history_page_")
    )
    dp.register_callback_query_handler(
        process_order_history_navigation,
        lambda c: c.data in ['prev_page', 'next_page'],
        state=OrderHistoryStates.viewing_history
    )
    dp.register_callback_query_handler(process_profile, lambda c: c.data == "profile")
    dp.register_callback_query_handler(process_settings, lambda c: c.data == "settings")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    dp.register_callback_query_handler(
        process_pay_order_from_history, 
        lambda c: c.data.startswith("pay_order_")
    ) 