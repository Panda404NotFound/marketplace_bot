from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from database.database import get_cart_items, get_orders, remove_from_cart, create_order, cancel_order, clear_cart
from config.config import DEFAULT_DELIVERY_ADDRESS
from keyboards.keyboards import get_cart_menu, get_back_menu, get_payment_methods, get_orders_to_delete, get_confirmation_keyboard, get_main_menu, get_payment_info_keyboard, get_user_orders_menu
from keyboards.fallback import save_navigation_state, reset_navigation_history

class PaymentStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–æ–≤."""
    waiting_for_payment_method = State()

async def process_cart(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–∞–∑–¥–µ–ª '–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞'."""
    try:
        await callback_query.answer()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        user_id = callback_query.from_user.id
        
        # –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º –ª—É—á—à–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é
        # –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏
        if callback_query.data == "cart":
            reset_navigation_history(user_id)
        
        await save_navigation_state(user_id, 'cart')
        
        await callback_query.message.edit_text(
            "üõí <b>–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n"
            "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ, "
            "–æ—Ñ–æ—Ä–º–ª—è—Ç—å –∏ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã.",
            reply_markup=get_cart_menu(),
            parse_mode='HTML'
        )
    except Exception as e:
        # print(f"Error in process_cart for user {user_id}: {e}")
        try:
            await callback_query.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu()
            )
        except:
            pass

async def process_my_orders(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ."""
    await callback_query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    user_id = callback_query.from_user.id
    await save_navigation_state(user_id, 'my_orders')
    
    cart_items = get_cart_items(user_id)
    
    if not cart_items:
        cart_text = "üõí <b>–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
        await callback_query.message.edit_text(
            cart_text,
            reply_markup=get_back_menu(),
            parse_mode='HTML'
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∫–æ—Ä–∑–∏–Ω–µ
    cart_text = "üõí <b>–¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ</b>\n\n"
    total_amount = 0
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    orders_for_keyboard = []
    
    for i, item in enumerate(cart_items, 1):
        product = item['product']
        quantity = item['quantity']
        size = item['size'] or "–ù–µ —É–∫–∞–∑–∞–Ω"
        color = item['color'] or "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        item_price = product.price * quantity
        total_amount += item_price
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ
        marketplace_name = {
            'wildberries': 'Wildberries',
            'ozon': 'Ozon',
            'yandex_market': '–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç'
        }.get(product.marketplace, product.marketplace)
        
        cart_text += (
            f"<b>{i}. {product.title}</b>\n"
            f"–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {marketplace_name}\n"
            f"–¶–µ–Ω–∞: {product.price} ‚ÇΩ x {quantity} = {item_price} ‚ÇΩ\n"
            f"–†–∞–∑–º–µ—Ä: {size}\n"
            f"–¶–≤–µ—Ç: {color}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        orders_for_keyboard.append({
            'id': item['id'],
            'total_amount': item_price,
            'status': 'new'  # –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å 'new'
        })
    
    cart_text += f"<b>–ò—Ç–æ–≥–æ: {total_amount} ‚ÇΩ</b>"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û–ø–ª–∞—Ç–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã"
    keyboard = get_user_orders_menu(orders_for_keyboard, has_pay_all_button=True)
    
    # –£–ø—Ä–æ—â–∞–µ–º - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    await callback_query.message.edit_text(
        cart_text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )

async def process_delete_order(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤."""
    await callback_query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    user_id = callback_query.from_user.id
    await save_navigation_state(user_id, 'delete_order')
    
    cart_items = get_cart_items(user_id)
    
    if not cart_items:
        await callback_query.message.edit_text(
            "üõí <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",
            reply_markup=get_back_menu(),
            parse_mode='HTML'
        )
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ–≤–∞—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    orders_for_keyboard = []
    for item in cart_items:
        product = item['product']
        quantity = item['quantity']
        price = product.price * quantity
        
        orders_for_keyboard.append({
            'id': item['id'],  # ID –∑–∞–ø–∏—Å–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ
            'total_amount': price
        })
    
    await callback_query.message.edit_text(
        "üõí <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:",
        reply_markup=get_orders_to_delete(orders_for_keyboard),
        parse_mode='HTML'
    )

async def process_remove_order(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."""
    await callback_query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    cart_item_id = int(callback_query.data.split('_')[-1])
    
    await callback_query.message.edit_text(
        "üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã?",
        reply_markup=get_confirmation_keyboard("remove_cart_item", cart_item_id),
        parse_mode='HTML'
    )

async def process_confirm_remove_cart_item(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."""
    await callback_query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    cart_item_id = int(callback_query.data.split('_')[-1])
    
    user_id = callback_query.from_user.id
    success = remove_from_cart(user_id, cart_item_id)
    
    if success:
        await callback_query.message.edit_text(
            "‚úÖ <b>–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã</b>",
            reply_markup=get_cart_menu(),
            parse_mode='HTML'
        )
    else:
        await callback_query.message.edit_text(
            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_cart_menu(),
            parse_mode='HTML'
        )

async def process_pay_orders(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –æ–¥–Ω–∏–º –ø–ª–∞—Ç–µ–∂–æ–º."""
    await callback_query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    user_id = callback_query.from_user.id
    await save_navigation_state(user_id, 'payment')
    
    cart_items = get_cart_items(user_id)
    
    if not cart_items:
        await callback_query.message.edit_text(
            "üõí <b>–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–æ–≤</b>\n\n–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",
            reply_markup=get_back_menu(),
            parse_mode='HTML'
        )
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    total_amount = 0
    items_text = ""
    
    for i, item in enumerate(cart_items, 1):
        product = item['product']
        quantity = item['quantity']
        size = item['size'] or "–ù–µ —É–∫–∞–∑–∞–Ω"
        color = item['color'] or "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        item_price = product.price * quantity
        total_amount += item_price
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ
        marketplace_name = {
            'wildberries': 'Wildberries',
            'ozon': 'Ozon',
            'yandex_market': '–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç'
        }.get(product.marketplace, product.marketplace)
        
        items_text += (
            f"<b>{i}. {product.title}</b>\n"
            f"–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {marketplace_name}\n"
            f"–¶–µ–Ω–∞: {product.price} ‚ÇΩ x {quantity} = {item_price} ‚ÇΩ\n"
            f"–†–∞–∑–º–µ—Ä: {size}\n"
            f"–¶–≤–µ—Ç: {color}\n\n"
        )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        cart_items=cart_items,
        total_amount=total_amount,
        delivery_address=DEFAULT_DELIVERY_ADDRESS,  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å –≤—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        is_combined_order=True  # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ —ç—Ç–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
    )
    
    payment_text = (
        f"üí∞ <b>–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–æ–≤</b>\n\n"
        f"<b>–¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:</b>\n\n"
        f"{items_text}"
        f"<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {total_amount} ‚ÇΩ\n"
        f"<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {DEFAULT_DELIVERY_ADDRESS}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    )
    
    await callback_query.message.edit_text(
        payment_text,
        reply_markup=get_payment_methods(),
        parse_mode='HTML'
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    await PaymentStates.waiting_for_payment_method.set()

async def process_payment_method(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã."""
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –∏–∑ callback_data
    payment_method = callback_query.data.replace('pay_', '')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    delivery_address = data.get('delivery_address', DEFAULT_DELIVERY_ADDRESS)  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    is_combined_order = data.get('is_combined_order', False)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    user_id = callback_query.from_user.id
    order_id = create_order(
        user_id=user_id,
        delivery_address=delivery_address,
        payment_method=payment_method
    )
    
    if order_id:
        payment_info = ""
        from admin.notification import MANAGER_NAME
        manager_username = f"@{MANAGER_NAME}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
        if payment_method == "mir":
            payment_info = (
                "üí≥ <b>–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –ú–ò–†</b>\n\n"
                "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 2202 2063 9165 2067\n"
                "–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ù–∞—Ç–∞–ª—å—è –ù–∞—Ç–∞–ª—å—è –ù–∞—Ç–∞–ª—å—è\n\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –û–ø–ª–∞—Ç–∏–ª¬ª."
            )
        elif payment_method == "visa_mc":
            payment_info = (
                "üí≥ <b>–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π Visa/Mastercard</b>\n\n"
                "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 4455 6677 8899 0011\n"
                "–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ù–∞—Ç–∞–ª—å—è –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è –ö–∞—Ä—Ç–∞\n\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –û–ø–ª–∞—Ç–∏–ª¬ª."
            )
        else:
            payment_info = "–í—ã–±—Ä–∞–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã."
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        payment_info += f"\n\n–í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_username} –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."
            
        # –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω
        await callback_query.message.edit_text(
            f"‚úÖ <b>–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω</b>\n\n"
            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}\n"
            f"–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {payment_method.upper()}\n"
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n\n"
            f"{payment_info}",
            reply_markup=get_payment_info_keyboard(order_id),
            parse_mode='HTML'
        )
    else:
        # –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
        await callback_query.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_cart_menu(),
            parse_mode='HTML'
        )
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

async def process_paid_order(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–û–ø–ª–∞—Ç–∏–ª'."""
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
    order_id = int(callback_query.data.split('_')[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ Telegram, –∞ –Ω–µ –∏–∑ –ë–î
    from database.database import get_order_details, update_order_status
    order_data = get_order_details(user_id, order_id)
    
    if not order_data:
        print(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ {order_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await callback_query.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ.",
            reply_markup=get_cart_menu(),
            parse_mode='HTML'
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "paid"
    success = update_order_status(order_id, "paid")
    if not success:
        print(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id}")
        
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ —á–∞—Ç
    from admin.notification import send_order_to_chat
    success = await send_order_to_chat(
        bot=callback_query.bot,
        user_id=user_id,
        username=username,
        order_data=order_data
    )
    
    if success:
        await callback_query.message.edit_text(
            "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!</b>\n\n"
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n"
            "–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
            reply_markup=get_main_menu(),
            parse_mode='HTML'
        )
    else:
        await callback_query.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –Ω–∞–ø—Ä—è–º—É—é.",
            reply_markup=get_main_menu(),
            parse_mode='HTML'
        )

async def process_cancel_action(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è."""
    await callback_query.answer()
    
    await callback_query.message.edit_text(
        "‚ùå <b>–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
        reply_markup=get_cart_menu(),
        parse_mode='HTML'
    )

async def process_remove_all_orders(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."""
    try:
        await callback_query.answer()
        
        await callback_query.message.edit_text(
            "üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã?",
            reply_markup=get_confirmation_keyboard("remove_all_cart_items", 0),
            parse_mode='HTML'
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        try:
            await callback_query.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_cart_menu()
            )
        except:
            pass

async def process_confirm_remove_all_cart_items(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."""
    try:
        await callback_query.answer()
        
        user_id = callback_query.from_user.id
        success = clear_cart(user_id)
        
        if success:
            await callback_query.message.edit_text(
                "‚úÖ <b>–í—Å–µ —Ç–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã</b>",
                reply_markup=get_cart_menu(),
                parse_mode='HTML'
            )
        else:
            await callback_query.message.edit_text(
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_cart_menu(),
                parse_mode='HTML'
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        try:
            await callback_query.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_cart_menu()
            )
        except:
            pass

def register_cart_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–∞–∑–¥–µ–ª–∞ '–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞'."""
    dp.register_callback_query_handler(process_cart, lambda c: c.data == "cart")
    dp.register_callback_query_handler(process_my_orders, lambda c: c.data == "my_orders")
    dp.register_callback_query_handler(process_delete_order, lambda c: c.data == "delete_order")
    dp.register_callback_query_handler(
        process_remove_order,
        lambda c: c.data.startswith("remove_order_")
    )
    dp.register_callback_query_handler(
        process_confirm_remove_cart_item,
        lambda c: c.data.startswith("confirm_remove_cart_item_")
    )
    dp.register_callback_query_handler(process_pay_orders, lambda c: c.data == "pay_orders")
    dp.register_callback_query_handler(
        process_payment_method,
        lambda c: c.data in ["pay_mir", "pay_visa_mc"],
        state=PaymentStates.waiting_for_payment_method
    )
    dp.register_callback_query_handler(
        process_paid_order,
        lambda c: c.data.startswith("paid_order_")
    )
    dp.register_callback_query_handler(process_cancel_action, lambda c: c.data == "cancel_action")
    dp.register_callback_query_handler(process_remove_all_orders, lambda c: c.data == "remove_all_orders")
    dp.register_callback_query_handler(
        process_confirm_remove_all_cart_items,
        lambda c: c.data == "confirm_remove_all_cart_items_0"
    ) 